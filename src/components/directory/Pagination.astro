---
interface Props {
  currentPage: number;
  totalPages: number;
  prevUrl: string | null;
  nextUrl: string | null;
  totalItems: number;
}

const { currentPage, totalPages, prevUrl, nextUrl, totalItems } = Astro.props;

// Generate page numbers to show
const MAX_VISIBLE_PAGES = 5;
const pageNumbers: (number | '...')[] = [];

if (totalPages <= MAX_VISIBLE_PAGES) {
  // Show all pages if total pages is less than or equal to max visible pages
  pageNumbers.push(...Array.from({ length: totalPages }, (_, i) => i + 1));
} else {
  // Always show first page
  pageNumbers.push(1);

  // Calculate start and end of visible pages
  let start = Math.max(2, currentPage - 1);
  let end = Math.min(totalPages - 1, currentPage + 1);

  // Adjust if we're near the start
  if (currentPage <= 3) {
    end = 4;
  }

  // Adjust if we're near the end
  if (currentPage >= totalPages - 2) {
    start = totalPages - 3;
  }

  // Add ellipsis if needed before middle pages
  if (start > 2) {
    pageNumbers.push('...');
  }

  // Add middle pages
  for (let i = start; i <= end; i++) {
    pageNumbers.push(i);
  }

  // Add ellipsis if needed after middle pages
  if (end < totalPages - 1) {
    pageNumbers.push('...');
  }

  // Always show last page
  if (totalPages > 1) {
    pageNumbers.push(totalPages);
  }
}

// Get the current URL and params
const url = new URL(Astro.url);
const params = url.searchParams;

// Function to generate page URL
const getPageUrl = (page: number) => {
  const newParams = new URLSearchParams(params);
  newParams.set('page', page.toString());
  return `${url.pathname}?${newParams.toString()}`;
};
---

<div class='mt-8'>
  <div class='flex items-center justify-between border-t border-gray-200 pt-8'>
    <div class='flex flex-1 justify-between sm:hidden'>
      {
        prevUrl && (
          <a
            href={prevUrl}
            class='relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50'>
            Previous
          </a>
        )
      }
      {
        nextUrl && (
          <a
            href={nextUrl}
            class='relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50'>
            Next
          </a>
        )
      }
    </div>
    <div class='hidden sm:flex sm:flex-1 sm:items-center sm:justify-between'>
      <div>
        <p class='text-sm text-gray-700'>
          Showing page <span class='font-medium'>{currentPage}</span> of{' '}
          <span class='font-medium'>{totalPages}</span> ({totalItems} total results)
        </p>
      </div>
      <div>
        <nav
          class='isolate inline-flex -space-x-px rounded-md shadow-sm'
          aria-label='Pagination'>
          {
            prevUrl && (
              <a
                href={prevUrl}
                class='relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'>
                <span class='sr-only'>Previous</span>
                <svg
                  class='h-5 w-5'
                  viewBox='0 0 20 20'
                  fill='currentColor'
                  aria-hidden='true'>
                  <path
                    fill-rule='evenodd'
                    d='M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z'
                    clip-rule='evenodd'
                  />
                </svg>
              </a>
            )
          }

          {
            pageNumbers.map((pageNum, idx) => {
              if (pageNum === '...') {
                return (
                  <span class='relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-700 ring-1 ring-inset ring-gray-300 focus:outline-offset-0'>
                    ...
                  </span>
                );
              }

              const isCurrentPage = pageNum === currentPage;
              return (
                <a
                  href={getPageUrl(pageNum)}
                  class={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                    isCurrentPage
                      ? 'z-10 bg-red-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600'
                      : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-offset-0'
                  }`}
                  aria-current={isCurrentPage ? 'page' : undefined}>
                  {pageNum}
                </a>
              );
            })
          }

          {
            nextUrl && (
              <a
                href={nextUrl}
                class='relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'>
                <span class='sr-only'>Next</span>
                <svg
                  class='h-5 w-5'
                  viewBox='0 0 20 20'
                  fill='currentColor'
                  aria-hidden='true'>
                  <path
                    fill-rule='evenodd'
                    d='M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z'
                    clip-rule='evenodd'
                  />
                </svg>
              </a>
            )
          }
        </nav>
      </div>
    </div>
  </div>
</div>


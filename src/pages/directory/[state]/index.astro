---
import Layout from '../../../layouts/Layout.astro';
import SearchResults from '../../../components/directory/SearchResults.astro';
import Pagination from '../../../components/directory/Pagination.astro';
import { supabase } from '../../../lib/supabase';
import {
  paginateQuery,
  generatePaginationLinks,
} from '../../../lib/pagination';
// @ts-ignore-unused-imports
import type { PostgrestResponse } from '@supabase/supabase-js';

interface SearchResult {
  data: any[] | null;
  error: {
    message: string;
  } | null;
  pagination?: {
    currentPage: number;
    totalPages: number;
    prevUrl: string | null;
    nextUrl: string | null;
    totalItems: number;
  };
}

// Get state from params and normalize it
const { state: rawState } = Astro.params;
// Capitalize first letter of each word for display
const state = rawState
  ?.split(' ')
  .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
  .join(' ');

// Get search params
const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get('search') || '';
const serviceFilter = url.searchParams.get('service') || '';
const currentPage = parseInt(url.searchParams.get('page') || '1');

// Service categories with their descriptions
const serviceCategories = [
  {
    id: 'masonry-contractors',
    name: 'Masonry Contractors',
    description: 'Expert masonry services for your home or business',
    searchTerms: ['Masonry', 'Mason', 'Brick', 'Stone', 'Contractor'],
  },
  {
    id: 'chimney-repair',
    name: 'Chimney Repair',
    description: 'Professional chimney repair and maintenance services',
    searchTerms: ['Chimney', 'Sweep', 'Repair', 'Maintenance'],
  },
  {
    id: 'roofing-services',
    name: 'Roofing Services',
    description: 'Specialized roofing and chimney flashing repairs',
    searchTerms: ['Roof', 'Roofing', 'Contractor', 'Construction'],
  },
  {
    id: 'brick-repair',
    name: 'Brick Repair',
    description: 'Expert brick repair and restoration services',
    searchTerms: ['Brick', 'Mason', 'Repair', 'Restoration'],
  },
];

// Build and execute the query
let searchResults: SearchResult = { data: null, error: null };
let cities: string[] = [];

try {
  // First, get all cities for the state
  const { data: locationData, error: locationError } = await supabase
    .from('places')
    .select('city')
    .ilike('province_state', state || '')
    .not('city', 'is', null);

  if (locationError) {
    throw locationError;
  }

  cities = [
    ...new Set(locationData?.map((item) => item.city).filter(Boolean)),
  ].sort();

  // Build the main query
  let query = supabase
    .from('places')
    .select('*')
    .ilike('province_state', state || '');

  if (searchQuery) {
    query = query.ilike('title', `%${searchQuery}%`);
  }

  if (serviceFilter) {
    const selectedCategory = serviceCategories.find(
      (cat) => cat.id === serviceFilter
    );
    if (selectedCategory) {
      const searchTerms = [
        ...selectedCategory.searchTerms,
        selectedCategory.name,
      ];
      const filterConditions = searchTerms.map(
        (term) => `category.ilike.%${term}%`
      );
      query = query.or(filterConditions.join(','));
    }
  }

  // Use pagination utility
  const paginatedResults = await paginateQuery(query, { page: currentPage });

  // Generate pagination URLs
  const { prev, next } = generatePaginationLinks(
    url.pathname,
    paginatedResults.currentPage,
    paginatedResults.totalPages,
    url.searchParams
  );

  searchResults = {
    data: paginatedResults.data,
    error: null,
    pagination: {
      currentPage: paginatedResults.currentPage,
      totalPages: paginatedResults.totalPages,
      prevUrl: prev,
      nextUrl: next,
      totalItems: paginatedResults.totalItems,
    },
  };
} catch (error: any) {
  console.error('Error fetching data:', error);
  searchResults = {
    data: null,
    error: {
      message:
        error?.message ||
        'An unexpected error occurred while loading professionals',
    },
  };
}

// Get the selected category if there's a service filter
const selectedCategory = serviceFilter
  ? serviceCategories.find((cat) => cat.id === serviceFilter)
  : undefined;
---

<Layout title={`Find Chimney Professionals in ${state}`}>
  <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12'>
    <!-- Breadcrumb -->
    <nav class='flex items-center space-x-2 text-gray-600 mb-8'>
      <a href='/directory' class='hover:text-red-600'>Directory</a>
      <span class='text-gray-400'>/</span>
      <span class='text-gray-900 font-semibold'>{state}</span>
    </nav>

    <div class='mb-8'>
      <h1 class='text-4xl font-bold text-gray-900 mb-3'>
        Find Chimney Professionals in {state}
      </h1>
      <p class='text-lg text-gray-600'>
        Connect with trusted chimney repair experts in your area
      </p>
    </div>

    <!-- Search Form -->
    <form class='mb-12' method='get'>
      <div class='flex flex-col gap-4'>
        <!-- Search and Service Row -->
        <div class='flex gap-4'>
          <div class='flex-1'>
            <input
              type='search'
              name='search'
              value={searchQuery}
              placeholder='Search for chimney professionals...'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'
            />
          </div>
          <div class='w-48'>
            <select
              name='service'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'>
              <option value=''>All Services</option>
              {
                serviceCategories.map((category) => (
                  <option
                    value={category.id}
                    selected={category.id === serviceFilter}>
                    {category.name}
                  </option>
                ))
              }
            </select>
          </div>
          <div class='w-32'>
            <button
              type='submit'
              class='w-full px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors'>
              Search
            </button>
          </div>
        </div>
      </div>
    </form>

    <!-- City Quick Links -->
    {
      cities.length > 0 && (
        <div class='mb-12'>
          <h2 class='text-xl font-semibold mb-4'>Browse by City</h2>
          <div class='flex flex-wrap gap-2'>
            {cities.map((city) => (
              <a
                href={`/directory/${state}/${city}`}
                class='px-4 py-2 bg-white border border-gray-200 rounded-lg hover:border-red-200 hover:bg-red-50 transition-colors'>
                {city}
              </a>
            ))}
          </div>
        </div>
      )
    }

    {
      searchResults.error && (
        <div class='bg-red-50 border border-red-200 rounded-lg p-4 mb-8'>
          <p class='text-red-700'>
            Error loading professionals: {searchResults.error.message}
          </p>
        </div>
      )
    }

    <SearchResults
      places={searchResults.data || []}
      selectedCategory={selectedCategory}
    />

    {
      searchResults.pagination && (
        <Pagination
          currentPage={searchResults.pagination.currentPage}
          totalPages={searchResults.pagination.totalPages}
          prevUrl={searchResults.pagination.prevUrl}
          nextUrl={searchResults.pagination.nextUrl}
          totalItems={searchResults.pagination.totalItems}
        />
      )
    }
  </div>
</Layout>

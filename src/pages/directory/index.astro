---
import Layout from '../../layouts/Layout.astro';

import SearchResults from '../../components/directory/SearchResults.astro';
import { supabase } from '../../lib/supabase';
// @ts-ignore-unused-imports
import type { PostgrestResponse } from '@supabase/supabase-js';

interface Place {
  id: number;
  title: string;
  category: string;
  province_state: string;
  city: string[];
  rating?: number;
}

interface SearchResult {
  data: Place[] | null;
  error: {
    message: string;
  } | null;
  pagination?: {
    currentPage: number;
    totalPages: number;
    totalItems: number;
  };
}

// Get search params
const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get('search') || '';
const serviceFilter = url.searchParams.get('service') || '';
const stateFilter = url.searchParams.get('state') || '';
const cityFilter = url.searchParams.get('city') || '';
const currentPage = parseInt(url.searchParams.get('page') || '1');
const itemsPerPage = 12;

// Service categories with their descriptions
const serviceCategories = [
  {
    id: 'masonry-contractors',
    name: 'Masonry Contractors',
    description: 'Expert masonry services for your home or business',
    searchTerms: ['Masonry', 'Mason', 'Brick', 'Stone', 'Contractor'],
  },
  {
    id: 'chimney-repair',
    name: 'Chimney Repair',
    description: 'Professional chimney repair and maintenance services',
    searchTerms: ['Chimney', 'Sweep', 'Repair', 'Maintenance'],
  },
  {
    id: 'roofing-services',
    name: 'Roofing Services',
    description: 'Specialized roofing and chimney flashing repairs',
    searchTerms: ['Roof', 'Roofing', 'Contractor', 'Construction'],
  },
  {
    id: 'brick-repair',
    name: 'Brick Repair',
    description: 'Expert brick repair and restoration services',
    searchTerms: ['Brick', 'Mason', 'Repair', 'Restoration'],
  },
];

// Get all states and cities from places view
const { data: locationData } = await supabase
  .from('places')
  .select('province_state, city')
  .not('province_state', 'is', null)
  .not('city', 'is', null);

// Process location data into a structured format
const locationsByState = locationData?.reduce(
  (acc, item) => {
    if (item.province_state) {
      if (!acc[item.province_state]) {
        acc[item.province_state] = new Set();
      }
      if (item.city) {
        acc[item.province_state].add(item.city);
      }
    }
    return acc;
  },
  {} as Record<string, Set<string>>
);

// Get sorted states
const states = Object.keys(locationsByState || {}).sort();

// Build and execute the query if search parameters exist
let searchResults: SearchResult = { data: null, error: null };

try {
  let query = supabase.from('places').select('*', { count: 'exact' });

  if (searchQuery) {
    query = query.ilike('title', `%${searchQuery}%`);
  }

  if (serviceFilter) {
    const selectedCategory = serviceCategories.find(
      (cat) => cat.id === serviceFilter
    );
    if (selectedCategory) {
      query = query.ilike('category', `%${selectedCategory.name}%`);
    }
  }

  // Apply state filter
  if (stateFilter) {
    query = query.eq('province_state', stateFilter);
  }

  // Apply city filter
  if (cityFilter) {
    query = query.eq('city', cityFilter);
  }

  // Calculate pagination
  const from = (currentPage - 1) * itemsPerPage;
  const to = from + itemsPerPage - 1;

  // Execute the query with pagination
  const { data, error, count } = await query
    .order('rating', { ascending: false })
    .range(from, to);

  searchResults = {
    data: data || [],
    error: error ? { message: error.message } : null,
    pagination: {
      currentPage,
      totalPages: count ? Math.ceil(count / itemsPerPage) : 0,
      totalItems: count || 0,
    },
  };
} catch (error) {
  searchResults = {
    data: null,
    error: { message: 'An unexpected error occurred' },
  };
}

// Get the selected category if there's a service filter
const selectedCategory = serviceFilter
  ? serviceCategories.find((cat) => cat.id === serviceFilter)
  : undefined;

// Helper function to generate pagination URL
const getPaginationUrl = (page: number) => {
  const params = new URLSearchParams(url.searchParams);
  params.set('page', page.toString());
  return `?${params.toString()}`;
};

// Calculate total pages
const totalPages = searchResults.data
  ? Math.ceil(searchResults.data.length / itemsPerPage)
  : 0;
---

<Layout title='Find Local Chimney Professionals'>
  <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12'>
    <div class='mb-8'>
      <h1 class='text-4xl font-bold text-gray-900 mb-3'>
        Find Local Chimney Professionals
      </h1>
      <p class='text-lg text-gray-600'>
        Connect with trusted chimney repair experts in your area
      </p>
    </div>

    <!-- Search Form -->
    <form class='mb-12' method='get'>
      <div class='flex flex-col gap-4'>
        <!-- Search and Service Row -->
        <div class='flex gap-4'>
          <div class='flex-1'>
            <input
              type='search'
              name='search'
              value={searchQuery}
              placeholder='Search for chimney professionals...'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'
            />
          </div>
          <div class='w-48'>
            <select
              name='service'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'>
              <option value=''>All Services</option>
              {
                serviceCategories.map((category) => (
                  <option
                    value={category.id}
                    selected={category.id === serviceFilter}>
                    {category.name}
                  </option>
                ))
              }
            </select>
          </div>
          <div class='w-48'>
            <select
              name='state'
              id='state-select'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'>
              <option value=''>All States</option>
              {
                states.map((state) => (
                  <option value={state} selected={state === stateFilter}>
                    {state}
                  </option>
                ))
              }
            </select>
          </div>
          <div class='w-48'>
            <select
              name='city'
              id='city-select'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'>
              <option value=''>All Cities</option>
              {
                stateFilter &&
                  Array.from(locationsByState?.[stateFilter] || []).map(
                    (city) => (
                      <option value={city} selected={city === cityFilter}>
                        {city}
                      </option>
                    )
                  )
              }
            </select>
          </div>
          <div class='w-32'>
            <button
              type='submit'
              class='w-full px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors'>
              Search
            </button>
          </div>
        </div>
      </div>
    </form>

    <script is:inline define:vars={{ locationsByState }}>
      // Add client-side handling for state-city dependency
      const stateSelect = document.getElementById('state-select');
      const citySelect = document.getElementById('city-select');
      const locationData = locationsByState;

      stateSelect?.addEventListener('change', (event) => {
        const selectedState = event.target.value;
        if (citySelect) {
          citySelect.innerHTML = '<option value="">All Cities</option>';
          if (selectedState && locationData[selectedState]) {
            Array.from(locationData[selectedState]).forEach((city) => {
              const option = document.createElement('option');
              option.value = String(city);
              option.textContent = String(city);
              citySelect.appendChild(option);
            });
          }
        }
      });
    </script>

    {
      searchResults.error && (
        <div class='bg-red-50 border border-red-200 rounded-lg p-4 mb-8'>
          <p class='text-red-700'>
            Error loading professionals: {searchResults.error.message}
          </p>
        </div>
      )
    }

    {
      searchResults.data ? (
        <>
          <SearchResults
            places={searchResults.data || []}
            selectedCategory={selectedCategory}
            totalCount={searchResults.pagination?.totalItems}
          />

          {/* Pagination Controls */}
          {searchResults.pagination &&
            searchResults.pagination.totalPages > 1 && (
              <div class='flex justify-center gap-2 mt-8'>
                {searchResults.pagination.currentPage > 1 && (
                  <a
                    href={getPaginationUrl(
                      searchResults.pagination.currentPage - 1
                    )}
                    class='px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 text-gray-700'>
                    Previous
                  </a>
                )}

                <span class='px-4 py-2 text-gray-600'>
                  Page {searchResults.pagination.currentPage} of{' '}
                  {searchResults.pagination.totalPages}
                </span>

                {searchResults.pagination.currentPage <
                  searchResults.pagination.totalPages && (
                  <a
                    href={getPaginationUrl(
                      searchResults.pagination.currentPage + 1
                    )}
                    class='px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 text-gray-700'>
                    Next
                  </a>
                )}
              </div>
            )}
        </>
      ) : (
        <>
          <div class='mb-12'>
            <h2 class='text-2xl font-semibold mb-6'>Browse by Location</h2>
            <div class='grid md:grid-cols-2 lg:grid-cols-3 gap-6'>
              {states.map((state) => (
                <div class='bg-white rounded-lg border border-gray-200 p-6'>
                  <h3 class='text-xl font-semibold mb-4'>{state}</h3>
                  <div class='flex flex-wrap gap-2'>
                    {Array.from(locationsByState?.[state] || [])
                      .slice(0, 5)
                      .map((city) => (
                        <a
                          href={`/directory/${state}/${city}`}
                          class='text-red-600 hover:text-red-700'>
                          {city}
                        </a>
                      ))}
                    {(locationsByState?.[state]?.size || 0) > 5 && (
                      <a
                        href={`/directory/${state}`}
                        class='text-gray-500 hover:text-gray-700'>
                        +{(locationsByState?.[state]?.size || 0) - 5} more
                      </a>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div class='mb-12'>
            <h2 class='text-2xl font-semibold mb-6'>Browse by Service</h2>
            <div class='grid md:grid-cols-2 gap-6'>
              {serviceCategories.map((category) => (
                <a
                  href={`/directory/services/${category.id}`}
                  class='block bg-white rounded-lg border border-gray-200 p-6 hover:border-red-100 hover:shadow-sm transition-all'
                  data-category={category.id}>
                  <h3 class='text-2xl font-semibold text-gray-900 mb-2'>
                    {category.name}
                  </h3>
                  <p class='text-gray-600 mb-4'>{category.description}</p>
                  <span class='text-red-600 font-medium'>
                    View all professionals →
                  </span>
                </a>
              ))}
            </div>
          </div>
        </>
      )
    }
  </div>
</Layout>

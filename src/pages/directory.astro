---
import Layout from '../layouts/Layout.astro';
import SearchResults from '../components/directory/SearchResults.astro';
import { supabase } from '../../app_v2/src/lib/supabase';

// Get search params
const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get('search') || '';
const serviceFilter = url.searchParams.get('service') || '';
const cityFilter = url.searchParams.get('city') || '';
const stateFilter = url.searchParams.get('state') || '';
const currentPage = parseInt(url.searchParams.get('page') || '1');
const itemsPerPage = 12;

console.log('Search params:', { searchQuery, serviceFilter, cityFilter, stateFilter, currentPage });

// Service categories with their descriptions
const serviceCategories = [
  {
    id: 'masonry-contractors',
    name: 'Masonry Contractors',
    description: 'Expert masonry services for your home or business',
    searchTerms: ['Masonry', 'Mason', 'Brick', 'Stone', 'Contractor']
  },
  {
    id: 'chimney-repair',
    name: 'Chimney Repair',
    description: 'Professional chimney repair and maintenance services',
    searchTerms: ['Chimney', 'Sweep', 'Repair', 'Maintenance']
  },
  {
    id: 'roofing-services',
    name: 'Roofing Services',
    description: 'Specialized roofing and chimney flashing repairs',
    searchTerms: ['Roof', 'Roofing', 'Contractor', 'Construction']
  },
  {
    id: 'brick-repair',
    name: 'Brick Repair',
    description: 'Expert brick repair and restoration services',
    searchTerms: ['Brick', 'Mason', 'Repair', 'Restoration']
  },
];

// First, get all unique cities and states
const { data: locationData } = await supabase
  .from('places')
  .select('city, province_state')
  .not('city', 'is', null)
  .not('province_state', 'is', null);

// Process location data into a structured format
const locationsByState = locationData?.reduce((acc, item) => {
  if (item.province_state && item.city) {
    if (!acc[item.province_state]) {
      acc[item.province_state] = new Set();
    }
    item.city.forEach((city: string) => acc[item.province_state].add(city));
  }
  return acc;
}, {} as Record<string, Set<string>>);

// Get sorted states
const states = Object.keys(locationsByState || {}).sort();

// Get cities for selected state or all cities if no state selected
const getCitiesForState = (state: string) => {
  if (state && locationsByState?.[state]) {
    return Array.from(locationsByState[state]).sort();
  }
  return [];
};

const availableCities = stateFilter ? getCitiesForState(stateFilter) : [];

// Build and execute the query
let query = supabase
  .from('places')
  .select('*', { count: 'exact' });

// Apply search filter if there's a search query
if (searchQuery) {
  query = query.ilike('title', `%${searchQuery}%`);
}

// Apply service filter if selected
if (serviceFilter) {
  const selectedCategory = serviceCategories.find(cat => cat.id === serviceFilter);
  console.log('Selected category:', selectedCategory);
  if (selectedCategory) {
    const filterConditions = selectedCategory.searchTerms.map(term => 
      `category.ilike.%${term}%`
    );
    filterConditions.push(`category.ilike.%${selectedCategory.name}%`);
    query = query.or(filterConditions.join(','));
  }
}

// Apply location filters
if (stateFilter) {
  query = query.eq('province_state', stateFilter);
}

if (cityFilter && stateFilter) {
  query = query.contains('city', [cityFilter]);
}

// Calculate pagination
const from = (currentPage - 1) * itemsPerPage;
const to = from + itemsPerPage - 1;

// Execute the query with pagination
const { data: places, error, count } = await query
  .order('rating', { ascending: false })
  .range(from, to);

const totalPages = count ? Math.ceil(count / itemsPerPage) : 0;

console.log('Query results:', { 
  count,
  currentPage,
  totalPages,
  error: error?.message,
  firstFewResults: places?.slice(0, 3)
});

// Get the selected category if there's a service filter
const selectedCategory = serviceFilter 
  ? serviceCategories.find(cat => cat.id === serviceFilter)
  : undefined;

// Helper function to generate pagination URL
const getPaginationUrl = (page: number) => {
  const params = new URLSearchParams(url.searchParams);
  params.set('page', page.toString());
  return `?${params.toString()}`;
};
---

<Layout title='Find Local Chimney Professionals'>
  <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12'>
    <div class='mb-8'>
      <h1 class='text-4xl font-bold text-gray-900 mb-3'>
        Find Local Chimney Professionals
      </h1>
      <p class='text-lg text-gray-600'>
        Connect with trusted chimney repair experts in your area
      </p>
    </div>

    <!-- Search Form -->
    <form class='mb-12' method='get' action='/directory'>
      <div class='flex flex-col gap-4'>
        <!-- Search and Service Row -->
        <div class='flex gap-4'>
          <div class='flex-1'>
            <input
              type='search'
              name='search'
              value={searchQuery}
              placeholder='Search for chimney professionals...'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'
            />
          </div>
          <div class='w-48'>
            <select
              name='service'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'>
              <option value=''>All Services</option>
              {
                serviceCategories.map((category) => (
                  <option value={category.id} selected={category.id === serviceFilter}>
                    {category.name}
                  </option>
                ))
              }
            </select>
          </div>
        </div>

        <!-- Location Filters Row -->
        <div class='flex gap-4'>
          <div class='flex-1'>
            <select
              name='state'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'
              onchange="this.form.city.value=''; this.form.submit();">
              <option value=''>All States/Provinces</option>
              {
                states.map((state) => (
                  <option value={state} selected={state === stateFilter}>
                    {state}
                  </option>
                ))
              }
            </select>
          </div>
          <div class='flex-1'>
            <select
              name='city'
              class='w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500'
              disabled={!stateFilter}>
              <option value=''>All Cities</option>
              {
                availableCities.map((city) => (
                  <option value={city} selected={city === cityFilter}>
                    {city}
                  </option>
                ))
              }
            </select>
          </div>
          <div class='w-32'>
            <button
              type='submit'
              class='w-full px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors'>
              Search
            </button>
          </div>
        </div>
      </div>
    </form>

    {error && (
      <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-8">
        <p class="text-red-700">Error loading professionals: {error.message}</p>
      </div>
    )}

    {!searchQuery && !serviceFilter && !cityFilter && !stateFilter ? (
      <>
        <p class='text-gray-600 mb-8'>
          Browse trusted chimney professionals by service type
        </p>

        <!-- Service Categories -->
        <div class='grid md:grid-cols-2 gap-6'>
          {
            serviceCategories.map((category) => (
              <a
                href={`/directory?service=${category.id}`}
                class='block bg-white rounded-lg border border-gray-200 p-6 hover:border-red-100 hover:shadow-sm transition-all'
                data-category={category.id}>
                <h2 class='text-2xl font-semibold text-gray-900 mb-2'>
                  {category.name}
                </h2>
                <p class='text-gray-600 mb-4'>{category.description}</p>
                <span class='text-red-600 font-medium'>
                  View all professionals â†’
                </span>
              </a>
            ))
          }
        </div>
      </>
    ) : (
      <>
        <SearchResults places={places || []} selectedCategory={selectedCategory} />
        
        {/* Pagination Controls */}
        {totalPages > 1 && (
          <div class="flex justify-center gap-2 mt-8">
            {currentPage > 1 && (
              <a
                href={getPaginationUrl(currentPage - 1)}
                class="px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 text-gray-700">
                Previous
              </a>
            )}
            
            <span class="px-4 py-2 text-gray-600">
              Page {currentPage} of {totalPages}
            </span>

            {currentPage < totalPages && (
              <a
                href={getPaginationUrl(currentPage + 1)}
                class="px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 text-gray-700">
                Next
              </a>
            )}
          </div>
        )}
      </>
    )}
  </div>
</Layout>

<script>
  // Add client-side handling for state/province changes
  document.addEventListener('DOMContentLoaded', () => {
    const stateSelect = document.querySelector('select[name="state"]');
    const citySelect = document.querySelector('select[name="city"]');

    if (stateSelect && citySelect) {
      stateSelect.addEventListener('change', () => {
        citySelect.value = '';
        if (!stateSelect.value) {
          citySelect.disabled = true;
        } else {
          citySelect.disabled = false;
        }
      });
    }
  });
</script>
